#!/bin/bash
#lib's for the auto wine build script !
#set -x
echo "lib's version 0.13"
export WORKDIR=/build/wine/
export PATH="/usr/lib/ccache/bin:/usr/lib/ccache/:.:${PATH}"
function setProxy
{
	export ftp_proxy="http://192.168.1.35:3128"
	export http_proxy="http://192.168.1.35:3128"
}
function unsetProxy
{
	unset ftp_proxy
	unset http_proxy
}
function getSignFile
{
	unsetProxy
	wget ftp://ibiblio.org/pub/linux/system/emulators/wine/$1.sign -O $1.sign
	if [ "$?" != "0" ] ; then
		echo "sign file not downloaded for $1. Perhaps network error, sleeping for 2 minutes"
		sleep 2m
		wget ftp://ibiblio.org/pub/linux/system/emulators/wine/$1.sign -O $1.sign
		if [ "$?" != "0" ] ; then
			echo "sign file not downloaded for $1. Not a network a problem (or it's serrious)"
		fi
	fi
	unsetProxy
}

function getWineSrc
{
	rm -rv $1
	setProxy
	wget ftp://ibiblio.org/pub/linux/system/emulators/wine/$1 -O $1
	unsetProxy
}

function preBuild 
{
	OPWD=$PWD
	rm -rf $HOME/wb
	mkdir -p $HOME/wb/version
	cp $1 $HOME/wb/
	cd $HOME/wb/
}

function checkSign
{
        gpg --verify $1 $2 2>&1
	export signState=$?
	return $signState
}
function shaTest
{

	sha2=$(sha512sum ./configure | awk '{print $1}')
	if [ $1 != "$sha2" ] 
	then
		return 1
	fi
	return 0
}
function build
{
	echo "build::Extracting archive  \`$1\` ..." 1>&2
	VERSION=$(getVersion $1)
	NAME=$(buildingVersion $1)
	mkdir -p $NAME
	tar xvf $1
	cd $NAME
	configureSha=$(sha512sum  ./configure | awk '{print $1}')
	buildState=16
	[ $needPatch == true ]  && { P_applyPatch || return $buildState ; }
	[ $needPatch == true ]  && VERSION=$VERSION-$2
	buildState=8
	[ $needPatch == true ]  && { shaTest $configureSha || return $buildState ; }
	echo "build::Runing configure ..." 1>&2
	#
	#if ! ./configure --prefix=$HOME/Desktop/wine/ >&1
	if ! ./configure CPPFLAGS='-I/usr/X11/include' LIBS='-lGL -lGLU' LDFLAGS='-L/usr/X11/lib' --prefix=$HOME/wb/version/$VERSION/wineversion/$VERSION/usr/ >&1
	then {
		echo "Configure failed, aborting ..." 1>&2
		cd ..
		rm -rf $NAME
		buildState=1
		return $buildState
	}
	fi
	cpt=0
		echo "build($cpt)::Making ..." 1>&2
		let "cpt = cpt + 1"
		if !  make >&1 
		then {
			echo "build($cpt)::Making failed, trying to make depend ..." 1>&2
			if ! make depend >&1
			then {
				echo "build$(cpt)::OOPS make depend failed" 1>&2
				cd ..
				rm -rf $NAME
				echo "build($cpt)::Build realy failed, file removed" 1>&2
				buildState=2
				return $buildState
			}
			else {
				echo "build($cpt)::make depend success, trying a new make ..." 1>&2
				if ! make >&1
				then {
					echo "build($cpt)::OOPS, Build re-failed, removing file" 1>&2
					cd ..
					rm -rf  $NAME
					buildState=4
					return $buildState
				}
				fi
			}
			fi
		}
		fi
	echo "build($cpt)::Build success, Installing ..." 1>&2
	#make install can failed, we don't test this because it's a lot of cp line and there is no reason for a failure.
	make install >&1
	cp -arv $HOME/wb/version /build/wine/
	cd ..
	echo "build::Removing compiled file ..." 1>&2
	rm -rf  $NAME
	buildState=0
	return $buildState
}
function webVersionList
{
	unsetProxy
	wget -O/dev/null ftp://ibiblio.org/pub/linux/system/emulators/wine/ --no-remove-listing -q
	cat .listing | awk '{print $9}' | grep wine | grep -v ".sign" |  grep -v ".diff" | sed 's/$//'  > /tmp/wineVersionList
	rm -f .listing
}
function localVersionList
{
	#ls -1 version/  | sed -e "s/.pol//" >/tmp/localVersionList
	find version/ -name "wine-*.pol" -exec basename '{}' .pol \;  > /tmp/localVersionList
	#find version/ -name "wine-?.?*.pol" -o "copied" -printf '%f\n' | sed -e "s/.pol//" >/tmp/localVersionList
}
function versionToBuild
{
	rm -f /tmp/wineSrcToBuild
	webVersionList
	localVersionList
	touch /tmp/wineSrcToBuild
	while read webVersionFile
	do
		buildThis="yes"
		webVersion=$(buildingVersion $webVersionFile)
		while read localVersion
		do
			if [ "$webVersion" == "$localVersion" ] ; then
				buildThis="no"
			fi
			if [ "$buildThis" == "yes" ] ; then 
				while read failedToBuild
				do
					if [ "$webVersion" == "$failedToBuild" ] ; then
						buildThis="no"
					fi
				done < failedToBuild
			fi
		done < /tmp/localVersionList
		if [ "$buildThis" == "yes" ] ; then
			echo "$webVersionFile" >> /tmp/wineSrcToBuild
		fi
	done < /tmp/wineVersionList
	sort -r < /tmp/wineSrcToBuild > /tmp/wineSrcToBuild2
	mv -f /tmp/wineSrcToBuild2 /tmp/wineSrcToBuild
}
function buildingVersion
{
	echo $1 | sed -e "s/.tar.bz2//"
}
function getVersion
{
	echo $(buildingVersion $1) | sed -e "s/wine-//"	
}
function polize
{
	echo "polize::Entering polization step ..."
	NAME=$(buildingVersion $1)
	VERSION=$(getVersion $1)
	#mkdir -p version/$VERSION
	echo "polize::Preparing POL package"
	cd version/$VERSION
	mkdir playonlinux
	mkdir files
	touch playonlinux/main
	cat <<EOF >> playonlinux/main
#!/bin/bash
if [ "\$PLAYONLINUX" = "" ]
then
	exit 0
fi

source "\$PLAYONLINUX/lib/sources" 

cp -ar \$SCRIPT_DIRECTORY/../wineversion/${VERSION} \$REPERTOIRE/WineVersions/${VERSION}

exit
EOF
	echo "polize::Removing unwanted file"
	rm -rf wineversion/${VERSION}/usr/man wineversion/${VERSION}/usr/include/
	find wineversion/${VERSION}/ -type f -exec strip -sp '{}' \; -print
	echo "polize::Creating POL Package ..."
	#tar cf ../${NAME}.tar * ##build lzma package
	tar jcf ../${NAME}.pol *
	cd ..
	#lzma -9 ${NAME}.tar
	#mv ${NAME}.tar.lzma ${NAME}.pol
	echo "polize::Removing build file ..."
	rm -rf ${VERSION}
	cd ..
	echo "polize::Leaving polzing ..."
}
source libPatch
echo "lib's sourced !"
