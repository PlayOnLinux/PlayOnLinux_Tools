#!/bin/bash 

echo "libPatch v2"
P_file=patchRequest.lst
needPatch=false
patchAllowLst=/build/wine/patchAllowed.lst

function P_Start
{
	P_downloadRequest
	P_buildSpecialWine
}

function P_downloadRequest
{
	unsetProxy
	wget -q -O $P_file http://www.playonlinux.com/admin/wine-builds/list.php
}
function P_changeStatus
{
	unsetProxy
	idTask=$1
	shift
	statut=$1
	shift
	message="$(P_statusToTxt $statut)"
	message="$message. $@"
	wget -q -O /dev/null "http://www.playonlinux.com/admin/wine-builds/update.php?id=$idTask&statut=$statut&message=$message"
}

function P_buildSpecialWine
{
	[ `wc -l < $P_file` -gt 0 ] || return 1
	while read line
	do
		P_chkLine $line || { P_reportError $? $P_idTask > $P_idTask.build.out ; echo "Error with line: '$line' ... continue"  ;   continue ; }
		echo "Output to $P_idTask.build.out"
		bash /build/wine/patchBuild.sh "$line" &> $P_idTask.build.out
		echo -e "0task_$P_idTask\t0/$P_idTask.build.out\thome.aplu.fr\t70" >> .cache 
		# show file into gopher :-)
	done < $P_file
}
function P_license
{
	wget 'http://source.winehq.org/git/wine.git/?a=blob_plain;f=LICENSE;hb=HEAD' -q -O /tmp/LICENSE.wine
	echo "WineBuild LICENSE AGREEMENT"
	echo ""
	echo "You will install a patched (modified) version of free software Wine."
	echo "The PlayOnLinux team can't be responsible for any problem by using it."
	echo "This build is based on this version of Wine: $VERSIONWI."
	echo "You can found the official source of Wine on their website: http://winehq.org"
	echo ""
	echo "All patchs applied for compilation is available into this package."
	echo "After installing they will be available into ~/.PlayOnLinux/WineVersion/$VERSION"
	echo "The log generated by the automated build process is here: http://aplu.fr/g/$P_idTask" 
	echo ""
	echo "Wine is a free software, by installing this build you agree their license agreement"
	echo "and you take FULL RESPONSIBILITY FOR ANY PROBLEMS THAT CAN HAPPEN."
	echo "If you have any request, please made it on the PlayOnLinux website."
	echo ""
	echo "--- Wine License ---"
	cat /tmp/LICENSE.wine
	echo "--------------------"
	
}
function P_polize
{
	echo "polize::Entering polization step ..."
	P_idTask=$3
	VERSIONWI=$(getVersion $1)
	NAME=$(buildingVersion $1)-$2_$P_idTask
	VERSION=$(getVersion $1)-$2
	echo "polize::Preparing POL package"
	cd version/$VERSION
	mkdir playonlinux
	mkdir files
	while read line
	do
		cp $line files/$(basename $line)
	done < /tmp/patch/listToApply
	P_license > files/license
	touch playonlinux/main
	cat <<EOF >> playonlinux/main
#!/bin/bash
[ "\$PLAYONLINUX" = "" ] && exit 0

source "\$PLAYONLINUX/lib/sources" 

#[ -f \$REPERTOIRE/configurations/guis/\$POL_SetupWindow_ID ] || POL_SetupWindow_Init
POL_SetupWindow_Init
POL_SetupWindow_licence "Please read carefuly the follwing ToS." "User Agreement" "\$SCRIPT_DIRECTORY/license"
POL_SetupWindow_wait_next_signal "Installing Wine ${VERSION} ..." "Wine Version Setup"

mkdir -p  \$REPERTOIRE/WineVersions/${VERSION}/patch/
cp -a \$SCRIPT_DIRECTORY/* \$REPERTOIRE/WineVersions/${VERSION}/patch/

cp -ar \$SCRIPT_DIRECTORY/../wineversion/${VERSION} \$REPERTOIRE/WineVersions/${VERSION}
POL_SetupWindow_detect_exit

#[ -f \$REPERTOIRE/configurations/guis/\$POL_SetupWindow_ID ] || POL_SetupWindow_Close
POL_SetupWindow_Close

exit
EOF
	echo "polize::Removing unwanted file"
        rm -rf wineversion/${VERSION}/usr/man wineversion/${VERSION}/usr/include/
        find wineversion/${VERSION}/ -type f -exec strip -sp '{}' \; -print
        echo "polize::Creating POL Package ..."
        tar jcf ../${NAME}.pol *
        cd ..
        echo "polize::Removing build file ..."
        rm -rf ${VERSION}
        cd ..
        echo "polize::Leaving polzing ..."

}
function wgetSleep
{
	#file haven't to be bigger than 5Mb
	while [ `ps aux | grep $1 | grep -v grep | wc -l` -ne 0 ] 
	do
		sleep 1
		#Check is Length is present
		grep "^Length" /tmp/patch/wgt || return 1
		#Length > 5MB
		[ `grep "^Length" /tmp/patch/wgt  | awk '{print $2'}` -lt 5242880 ] || return 2

		sleep 5
	done
	grep -q 'ERROR' /tmp/patch/wgt && return 4
	[ `du -b patch.zip | awk '{print $1}'` -lt 5242880 ] || return 3
	return 0
}
function P_chkPatch
{
	mkdir -p /tmp/patch/sandbox
	rm -rf /tmp/patch/
	mkdir -p /tmp/patch/sandbox
	P_chkOPWD="$PWD"
	cd /tmp/patch/sandbox
	wgetPID=$(wget -b -o /tmp/patch/wgt -S -T 4 -4 -U "Mozilla"  -O patch.zip -t 1 "$P_patchURL" | sed -e 's/[a-zA-Z, .]//g' -e 's/\([[:digit:]]\)/\1/g')
	wgetSleep $wgetPID || { wgtErr=$? ; kill $wgetPID ; cat /tmp/patch/wgt ; cd $P_chkOPWD ; return $[10+$wgtErr] ; }
	{ file -b patch.zip | grep -qi "zip archive data" ;} || { rm -f patch.zip ; cd $P_chkOPWD ;  return 4 ; }
	echo "Trying to unzip ..."
	unzip -j -n patch.zip || { unzipRet=$? ; cd $P_chkOPWD ; rm -rf /tmp/patch/sandbox ; return 5 ; }
	echo "Done :-)"
	patchCpt=0
	rm -f /tmp/patch/listToApply
	#check if the patch zip contain a list
	if [ -f apply.lst ] ; then
		echo "apply.lst found, using it"
		while read l
		do
			bsn="$(basename "$l")"
			echo "Checking file $bsn" 
			[ ! -f "$bsn" ] || continue
			grep -q -e '^[0-9A-Za-z_\-]\{4,\}\.patch$' <<< "$bsn" || continue
			echo "ok"
			echo "/tmp/patch/sandbox/$bsn" >> /tmp/patch/listToApply
			patchCpt=$[1+$patchCpt]
		done < apply.patch
		echo "done reading apply.lst"
	else
		for P_patchFile in *
		do
			#check if file respect naming rules
			echo "Checking file $P_patchFile .... "
			grep -q -e '^[[:digit:]]\{2,4\}-[0-9A-Za-z_\-]\{4,\}\.patch$' <<< "$P_patchFile" || continue
			numero=$(awk -F- '{print $1}' <<< $P_patchFile)
			if [ ! -z $oldNum ] 
			then
				#currently do nothing - not yet implanted
				oldNum=$numero	
			fi
			echo "ok"
			#file respect registring it
			echo "/tmp/patch/sandbox/$P_patchFile" >> /tmp/patch/listToApply
			patchCpt=$[1+$patchCpt]
		done
	fi
	[ $patchCpt -eq 0 ] && { cd $P_chkOPWD ; rm -rf /tmp/patch/sandbox ; return 6 ; }
	cd $P_chkOPWD

}
function P_applyPatch
{
	while read line
	do
		patch -t -s -p1 < $line 
		ret=$?
		[ $ret -le 2 ] || return 1
	done < /tmp/patch/listToApply
	return 0
}
function P_statusToTxt
{
	case $1 in
	0)
		echo "In Q! Your please wait :-p"
		;;
	1)
		echo "Your request is starting :-)"
		;;
	2)
		echo "Build done, waiting for sync"
		;;
	3)
		echo "Yeah! You can use it!!!"
		;;
	11)
		echo "Wrong version of wine."
		;;
	12)	
		echo "Name of build isn't valid"
		;;
	13)	
		echo "Url isn't valid"
		;;
	14)
		echo "This is not a zip file"
		;;
	15)
		echo "Unzip wasn't able to extract. Corrupted?"
		;;
	16)
		echo "There is no patch in your zip! Please check file name"
		;;
	17)
		echo "Error with sign file of wine source. (Internal?)"
		;;
	21)
		echo "Error when downloading file, server didn't send Lenght of file"
		;;
	22)
		echo "Server reply a Lenght bigger than 5 MB"
		;;
	23)
		echo "Zip file is bigger than 5MB"
		;;
	24)
		echo "Error when fetching patch. Unknown error"
		;;
	51)
		echo "Configure script failed"
		;;
	52)
		echo "make depend failed"
		;;
	54)	
		echo "make failed"
		;;
	58)	
		echo "configure script was changed!"
		;;
	66)
		echo "Patching report an error."
		;;
	*)
		echo "Unknown error. Please read log and contact WineBuild Manager (MulX)!"
		;;
	esac

}

function P_reportError
{

	idTask=$2
	failValue=$[10+$1]
	shift
	shift
	addText="$@"
	echo "Task nÂ°$idTask ; raw fail value = $failValue"
	echo "----"
	echo "Additional info: '$addText'"
	echo "----"
	sync
	sleep 10s
	P_changeStatus $idTask $failValue "Info '$addText'. Log here: http://aplu.fr/g/$idTask"
}

function P_chkLine
{
	#cheking for the id
	P_idTask=$(cut -d \; -f1 <<< $1)


	#checking if this wine release was already compiled.
	P_WineVersion=$(cut -d \; -f2 <<< $1)
	sed -e 's/;/\n/g' $patchAllowLst | grep -q "$P_WineVersion" || return 1

	P_name=$(cut -d \; -f4 <<< $1)
	[ `echo -n $P_name | wc -c` -ge 4 ] || return 2
	grep -q '^\([0-9A-Za-z_\-]\)\{4,\}$' <<< $P_name || return 2
	P_name=$(sed -e 's/_/-/g' <<< $P_name)

	#checking is URL is a valid URL
	P_patchURL=$(cut -d \; -f3 <<< $1)
	#regex v1
	#grep -q -e '^\(ht\|f\)tp://[[:alpha:]][0-9A-Za-z.]\{0,\}\.[[:alpha:]]\{1,3\}/[0-9A-Za-z%/.?=_\-]\{1,\}.zip$' <<< $P_patchURL || return 3
	
	#regex v2 add ip support
	#grep -q -e '^\(ht\|f\)tp://\([0-9A-Za-z._\-]\{1,\}\.[[:alpha:]]\{1,3\}\|\([1-9]\|[1-9][0-9]\|1[0-9][0-9]\|2[0-4][0-9]\|25[0-5]\)\(\.\([0-9]\|[1-9][0-9]\|1[0-9][0-9]\|2[0-4][0-9]\|25[0-5]\)\)\{3\}\)/[0-9A-Za-z%/.?=_\-]\{1,\}.zip$' <<< "$P_patchURL" || return 3
	
	#regex v3 fixing bugs
	grep -q -e '^\(https\?\|ftp\)://\([0-9A-Za-z._\-]\{1,\}\.[[:alpha:]]\{2,3\}\|\([1-9]\|[1-9][0-9]\|1[0-9][0-9]\|2[0-4][0-9]\|25[0-5]\)\(\.\([0-9]\|[1-9][0-9]\|1[0-9][0-9]\|2[0-4][0-9]\|25[0-5]\)\)\{3\}\)/[0-9A-Za-z%/.?=_\-]\{1,\}.zip$' <<< "$P_patchURL" || return 3


	return 0
}
